// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String
  imgUrl    String
  review    String
  createdAt DateTime @default(now())
}

model Client {
  id             String  @id @default(cuid())
  firstName      String  @map("first_name")
  lastName       String  @map("last_name")
  email          String  @unique
  phone          String?
  address        String?
  isProfessional Boolean @default(false) @map("is_professional")
  subject        String? // Objet de la discussion
  internalNote   String? @map("internal_note") @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Quote     Quote[]

  @@map("clients")
}

model Quote {
  id          String @id @default(cuid())
  quoteNumber String @unique
  clientId    String
  client      Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  items QuoteItem[]

  subtotal    Float
  vatRate     Float @default(20.0) // TVA en %
  vatAmount   Float
  totalAmount Float

  status     QuoteStatus @default(DRAFT)
  validUntil DateTime
  notes      String?     @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quotes")
}

model QuoteItem {
  id      String @id @default(cuid())
  quoteId String
  quote   Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  createdAt DateTime @default(now())

  @@map("quote_items")
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String
  imgUrl    String
  review    String
  rating    Int      @default(5)
  createdAt DateTime @default(now())
}

model Client {
  id             String  @id @default(cuid())
  firstName      String  @map("first_name")
  lastName       String  @map("last_name")
  email          String  @unique
  phone          String?
  address        String?
  company        String? // Nom de l'entreprise
  website        String? // Site web du client
  isProfessional Boolean @default(false) @map("is_professional")
  status         String  @default("prospect") // prospect, active, inactive, archived
  subject        String? // Objet de la discussion
  internalNote   String? @map("internal_note") @db.Text
  lastContactAt  DateTime? @map("last_contact_at") // Dernière interaction

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("clients")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  image       String
  url         String
  technologies String[] // Technologies utilisées (React, Next.js, etc.)
  category    String   @default("web") // web, mobile, design
  isPublished Boolean  @default(true)
  order       Int      @default(0) // Pour l'ordre d'affichage

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("projects")
}

model TestimonialToken {
  id           String    @id @default(cuid())
  token        String    @unique @default(cuid())
  clientEmail  String    @map("client_email")
  clientName   String    @map("client_name")
  projectName  String?   @map("project_name") // Optionnel : nom du projet
  isUsed       Boolean   @default(false) @map("is_used")
  expiresAt    DateTime  @map("expires_at")
  testimonialId String?  @map("testimonial_id") // ID du testimonial créé
  emailSentAt  DateTime? @map("email_sent_at") // Quand l'email a été envoyé
  
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @default(now()) @map("updated_at")
  usedAt       DateTime? @map("used_at") // Quand le token a été utilisé

  @@map("testimonial_tokens")
}

model Devis {
  id                String   @id @default(cuid())
  devisNumber       String   @unique @map("devis_number") // DEV-2024-001
  status            String   @default("draft") // draft, sent, accepted, rejected, expired
  
  // Informations client
  clientFirstName   String   @map("client_first_name")
  clientLastName    String   @map("client_last_name")
  clientEmail       String   @map("client_email")
  clientPhone       String?  @map("client_phone")
  clientCompany     String?  @map("client_company")
  clientAddress     String?  @map("client_address") @db.Text
  
  // Informations entreprise
  companyName       String   @map("company_name")
  companyAddress    String   @map("company_address") @db.Text
  companyPhone      String   @map("company_phone")
  companyEmail      String   @map("company_email")
  companySiret      String   @map("company_siret")
  
  // Dates
  date              DateTime
  validUntil        DateTime @map("valid_until")
  
  // Montants
  subtotal          Float
  tvaRate           Float    @map("tva_rate") // Taux TVA en pourcentage
  tvaAmount         Float    @map("tva_amount")
  total             Float
  tvaApplicable     Boolean  @map("tva_applicable")
  
  // Prestations (JSON)
  items             Json     // Array d'objets {id, description, quantity, unitPrice, total}
  
  // Notes
  notes             String?  @db.Text
  
  // Dates système
  sentAt            DateTime? @map("sent_at") // Quand le devis a été envoyé
  acceptedAt        DateTime? @map("accepted_at") // Quand le devis a été accepté
  rejectedAt        DateTime? @map("rejected_at") // Quand le devis a été refusé
  
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("devis")
}

model Facture {
  id                String   @id @default(cuid())
  factureNumber     String   @unique @map("facture_number") // FAC-2024-001
  status            String   @default("pending") // pending, paid, overdue, cancelled
  
  // Lien vers le devis d'origine
  devisId           String?  @map("devis_id")
  
  // Informations client (dupliquées depuis le devis)
  clientFirstName   String   @map("client_first_name")
  clientLastName    String   @map("client_last_name")
  clientEmail       String   @map("client_email")
  clientPhone       String?  @map("client_phone")
  clientCompany     String?  @map("client_company")
  clientAddress     String?  @map("client_address") @db.Text
  
  // Informations entreprise
  companyName       String   @map("company_name")
  companyAddress    String   @map("company_address") @db.Text
  companyPhone      String   @map("company_phone")
  companyEmail      String   @map("company_email")
  companySiret      String   @map("company_siret")
  
  // Dates
  date              DateTime // Date de facturation
  dueDate           DateTime @map("due_date") // Date d'échéance
  
  // Montants
  subtotal          Float
  tvaRate           Float    @map("tva_rate")
  tvaAmount         Float    @map("tva_amount")
  total             Float
  tvaApplicable     Boolean  @map("tva_applicable")
  
  // Prestations (JSON)
  items             Json
  
  // Notes
  notes             String?  @db.Text
  
  // Paiement
  paidAt            DateTime? @map("paid_at")
  paymentMethod     String?   @map("payment_method") // wire_transfer, check, card, etc.
  paymentReference  String?   @map("payment_reference")
  
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("factures")
}


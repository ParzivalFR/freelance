// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String
  imgUrl    String
  review    String
  createdAt DateTime @default(now())
}

model Client {
  id             String  @id @default(cuid())
  firstName      String  @map("first_name")
  lastName       String  @map("last_name")
  email          String  @unique
  phone          String?
  address        String?
  isProfessional Boolean @default(false) @map("is_professional")
  subject        String? // Objet de la discussion
  internalNote   String? @map("internal_note") @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Quote     Quote[]

  @@map("clients")
}

// === NOUVELLES TABLES POUR LES DEVIS ===

model Quote {
  id          String      @id @default(cuid())
  number      String      @unique // Numéro de devis (ex: DEV-2024-001)
  title       String // Titre du devis
  description String?     @db.Text // Description générale
  status      QuoteStatus @default(DRAFT)

  // Dates importantes
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  validUntil DateTime? @map("valid_until") // Date de validité
  sentAt     DateTime? @map("sent_at") // Date d'envoi au client
  acceptedAt DateTime? @map("accepted_at") // Date d'acceptation
  rejectedAt DateTime? @map("rejected_at") // Date de refus

  // Montants
  subtotalHT Decimal @default(0) @map("subtotal_ht") @db.Decimal(10, 2) // Sous-total HT
  taxRate    Decimal @default(20) @map("tax_rate") @db.Decimal(5, 2) // Taux de TVA (%)
  taxAmount  Decimal @default(0) @map("tax_amount") @db.Decimal(10, 2) // Montant TVA
  totalTTC   Decimal @default(0) @map("total_ttc") @db.Decimal(10, 2) // Total TTC

  // Conditions
  paymentTerms  String? @map("payment_terms") @db.Text // Conditions de paiement
  deliveryTerms String? @map("delivery_terms") @db.Text // Conditions de livraison
  notes         String? @db.Text // Notes additionnelles

  // Relations
  clientId String @map("client_id")
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  items QuoteItem[] // Items du devis

  @@map("quotes")
}

model QuoteItem {
  id          String  @id @default(cuid())
  order       Int     @default(0) // Ordre d'affichage
  title       String // Titre de la prestation
  description String? @db.Text // Description détaillée

  // Prix et quantité
  quantity   Decimal @default(1) @db.Decimal(10, 2) // Quantité
  unitPrice  Decimal @map("unit_price") @db.Decimal(10, 2) // Prix unitaire HT
  totalPrice Decimal @map("total_price") @db.Decimal(10, 2) // Prix total HT (quantity * unitPrice)

  // Unité (jour, forfait, heure, etc.)
  unit String @default("forfait") // jour, heure, forfait, etc.

  // Relations
  quoteId String @map("quote_id")
  quote   Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("quote_items")
}

// Statuts possibles d'un devis
enum QuoteStatus {
  DRAFT // Brouillon
  SENT // Envoyé au client
  ACCEPTED // Accepté par le client
  REJECTED // Refusé par le client
  EXPIRED // Expiré
  CANCELLED // Annulé
}

// === TABLE OPTIONNELLE POUR LES MODÈLES DE DEVIS ===

model QuoteTemplate {
  id          String  @id @default(cuid())
  name        String // Nom du modèle (ex: "Site vitrine standard")
  description String? @db.Text

  // Données par défaut
  defaultTitle         String? @map("default_title")
  defaultDescription   String? @map("default_description") @db.Text
  defaultPaymentTerms  String? @map("default_payment_terms") @db.Text
  defaultDeliveryTerms String? @map("default_delivery_terms") @db.Text
  defaultValidityDays  Int?    @default(30) @map("default_validity_days")

  // Items prédéfinis pour ce modèle
  templateItems QuoteTemplateItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("quote_templates")
}

model QuoteTemplateItem {
  id          String  @id @default(cuid())
  order       Int     @default(0)
  title       String
  description String? @db.Text
  unitPrice   Decimal @map("unit_price") @db.Decimal(10, 2)
  quantity    Decimal @default(1) @db.Decimal(10, 2)
  unit        String  @default("forfait")

  // Relations
  templateId String        @map("template_id")
  template   QuoteTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("quote_template_items")
}
